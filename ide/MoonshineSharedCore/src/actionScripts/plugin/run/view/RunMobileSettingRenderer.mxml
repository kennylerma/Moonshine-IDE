<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// 
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
  	xmlns:s="library://ns.adobe.com/flex/spark"
  	xmlns:mx="library://ns.adobe.com/flex/mx"
  	width="100%"
  	paddingTop="15"
  	paddingBottom="5"
  	paddingLeft="15"
  	paddingRight="15" xmlns:settings="actionScripts.plugin.actionscript.as3project.settings.*" creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			import actionScripts.events.GeneralEvent;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.plugin.run.RunMobileSetting;
			import actionScripts.plugin.settings.renderers.LinkButtonSkin;
			import actionScripts.valueObjects.ConstantsCoreVO;
			
			[Bindable] public var setting:RunMobileSetting;
			
			[Bindable] private var isAndroidDevice:Boolean;
			
			private var deviceConfiguration:DeviceConfiguration;
			private var lastSelectedItem:Object;
			
			private function init():void
			{
				cmbOption.textInput.editable = cmbModelOption.textInput.editable = false;
				cmbOption.setStyle("contentBackgroundColor","#FFFFFF");
				cmbModelOption.setStyle("contentBackgroundColor","#FFFFFF");
				
				cmbModelOption.callLater(function():void
				{
					cmbOption.selectedIndex = setting.provider[setting.isSimulatorRun] ? 0 : 1;
					if (setting.provider[setting.name] != "null")
					{
						for (var i:int=0; i < cmbModelOption.dataProvider.length; i++)
						{
							if (setting.provider[setting.name].name == cmbModelOption.dataProvider[i].name)
							{
								cmbModelOption.selectedIndex = i;
								break;
							}
						}
					}
				});
				
				updateDevices(setting.provider[setting.targetPlatform]);
			}
			
			public function updateDevices(forPlatform:String):void
			{
				if (!forPlatform || forPlatform == "Android") cmbModelOption.dataProvider = ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES;
				else if (forPlatform == "iOS") cmbModelOption.dataProvider = ConstantsCoreVO.TEMPLATES_IOS_DEVICES;
				isAndroidDevice = (forPlatform == "iOS") ? false : true;
				cmbModelOption.callLater(function():void
				{
					cmbModelOption.selectedIndex = 0;
					lastSelectedItem = cmbModelOption.selectedItem;
				});
			}
			
			protected function cmbOption_changeHandler(event:IndexChangeEvent):void
			{
				setting.provider[setting.isSimulatorRun] = (cmbOption.selectedIndex == 0);
				setting.provider[setting.name] = cmbModelOption.selectedItem;
				
				lastSelectedItem = cmbModelOption.selectedItem;
				
				currentState = (cmbOption.selectedIndex == 0) ? "simulator" : "device";
			}
			
			protected function onConfigureDevices(event:MouseEvent):void
			{
				if (!deviceConfiguration)
				{
					deviceConfiguration = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, DeviceConfiguration, true) as DeviceConfiguration;
					deviceConfiguration.addEventListener(Event.CHANGE, onDeviceUpdated);
					deviceConfiguration.addEventListener(CloseEvent.CLOSE, onConfigurationPopupClosed);
					PopUpManager.centerPopUp(deviceConfiguration);
				}
			}
			
			private function onConfigurationPopupClosed(event:CloseEvent):void
			{
				deviceConfiguration.removeEventListener(CloseEvent.CLOSE, onConfigurationPopupClosed);
				deviceConfiguration.removeEventListener(Event.CHANGE, onDeviceUpdated);
				deviceConfiguration = null;
			}
			
			private function onDeviceUpdated(event:Event):void
			{
				if (cmbModelOption.dataProvider.getItemIndex(lastSelectedItem) != -1) cmbModelOption.selectedItem = lastSelectedItem;
				else cmbModelOption.selectedIndex = 0;
				
				GlobalEventDispatcher.getInstance().dispatchEvent(new GeneralEvent(GeneralEvent.DEVICE_UPDATED));
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="simulator"/>
		<s:State name="device"/>
	</s:states>
	
	<s:Label 
		text="{setting.label}"
		styleName="uiTextSettingsLabel"/>
	<s:ComboBox id="cmbOption"
				width="100%" alternatingItemColors="[#FFFFFF, #FFFFFF]" selectionColor="#cccccc" rollOverColor="#eeeeee"
				selectedIndex="0" change="cmbOption_changeHandler(event)">
		<s:dataProvider>
			<s:ArrayList>
				<fx:String>AIR Simulator</fx:String>
				<fx:String>Device</fx:String>
			</s:ArrayList>
		</s:dataProvider>
	</s:ComboBox>
	<s:Spacer height="3"/>
	<s:Rect width="100%"
			alpha="1">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="0xdadada"/>
		</s:stroke>
	</s:Rect>
	<s:VGroup width="100%" includeIn="simulator">
		<s:Label 
			text="Device Model"
			styleName="uiTextSettingsLabel" paddingTop="13"/>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:ComboBox id="cmbModelOption"
						width="100%" alternatingItemColors="[#FFFFFF, #FFFFFF]" selectionColor="#cccccc" rollOverColor="#eeeeee"
						selectedIndex="0" change="cmbOption_changeHandler(event)" labelField="name"/>
			<s:Button label="Configure"
					  click="onConfigureDevices(event)"/>
		</s:HGroup>
		<s:Spacer height="3"/>
	</s:VGroup>
	<s:VGroup width="100%" includeIn="device" paddingBottom="12">
		<s:HGroup width="100%" verticalAlign="middle"
				  includeInLayout="{!isAndroidDevice}" visible="{!isAndroidDevice}">
			<s:Label 
				text="Packaging Method"
				styleName="uiTextSettingsLabel" paddingTop="13"/>
			<s:Spacer width="100%"/>
			<s:RadioButton id="rbStandard" label="Standard" selected="true"
						   groupName="rgMethods"/>
			<s:RadioButton id="rbFast" label="Fast"
						   groupName="rgMethods"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle"
				  includeInLayout="{isAndroidDevice}" visible="{isAndroidDevice}">
			<s:Label 
				text="Packaging Method"
				styleName="uiTextSettingsLabel" paddingTop="13"/>
			<s:Spacer width="100%"/>
			<s:CheckBox id="cbCaptive" label="With Captive Runtime"/>
		</s:HGroup>
		<s:Rect width="100%"
				alpha="1">
			<s:stroke>
				<s:SolidColorStroke weight="1" color="0xdadada"/>
			</s:stroke>
		</s:Rect>
		<s:HGroup width="100%" paddingTop="15">
			<s:Label styleName="uiTextSettingsLabel"
					 text="Certificate" />
			<mx:Spacer width="100%"/>
			<s:Button label="Clear"
					  skinClass="{LinkButtonSkin}"/>	
			<s:Button label="Change"
					  skinClass="{LinkButtonSkin}"/>
		</s:HGroup>
		<s:Label id="lblCert"
				 styleName="uiTextSettingsValue"
				 paddingTop="10" width="98%"
				 text="C:\Windows\MyCertificate.p12"/>
		<s:Rect width="100%"
				alpha="1">
			<s:stroke>
				<s:SolidColorStroke weight="1" color="0xdadada"/>
			</s:stroke>
		</s:Rect>
		<s:HGroup width="100%" height="100%"
				  verticalAlign="middle" gap="0" paddingTop="15">
			<s:Label styleName="uiTextSettingsLabel"
					 text="Certificate Password"
					 paddingTop="15"
					 paddingBottom="15" paddingRight="50"/>
			<s:TextInput id="lblCertPass"
						 styleName="uiTextSettingsValue"
						 height="100%" width="100%"
						 textAlign="right"
						 borderVisible="false"
						 contentBackgroundAlpha="1"
						 unfocusedTextSelectionColor="#a8c6ee"
						 displayAsPassword="true" prompt="No Value"
						 focusAlpha="0"/>
		</s:HGroup>
	</s:VGroup>
</s:VGroup>